// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupMessageBuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupMessageBuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* GroupMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMessageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMessageInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GroupMessageBuf_2eproto() {
  protobuf_AddDesc_GroupMessageBuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GroupMessageBuf.proto");
  GOOGLE_CHECK(file != NULL);
  GroupMessage_descriptor_ = file->message_type(0);
  static const int GroupMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, msgsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, groupmessageinfo_),
  };
  GroupMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupMessage_descriptor_,
      GroupMessage::default_instance_,
      GroupMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupMessage));
  GroupMessageInfo_descriptor_ = file->message_type(1);
  static const int GroupMessageInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, userphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, created_),
  };
  GroupMessageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupMessageInfo_descriptor_,
      GroupMessageInfo::default_instance_,
      GroupMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupMessageInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GroupMessageBuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupMessage_descriptor_, &GroupMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupMessageInfo_descriptor_, &GroupMessageInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GroupMessageBuf_2eproto() {
  delete GroupMessage::default_instance_;
  delete GroupMessage_reflection_;
  delete GroupMessageInfo::default_instance_;
  delete GroupMessageInfo_reflection_;
}

void protobuf_AddDesc_GroupMessageBuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025GroupMessageBuf.proto\022\026com.huizhi.im.p"
    "rotobuf\"t\n\014GroupMessage\022\017\n\007groupId\030\001 \002(\005"
    "\022\017\n\007msgSize\030\002 \002(\005\022B\n\020groupMessageInfo\030\003 "
    "\003(\0132(.com.huizhi.im.protobuf.GroupMessag"
    "eInfo\"w\n\020GroupMessageInfo\022\014\n\004type\030\001 \002(\005\022"
    "\016\n\006userId\030\002 \002(\005\022\021\n\tuserPhoto\030\003 \001(\t\022\020\n\010ni"
    "ckName\030\004 \001(\t\022\017\n\007content\030\005 \002(\014\022\017\n\007created"
    "\030\006 \002(\003B\021B\017GroupMessageBuf", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GroupMessageBuf.proto", &protobuf_RegisterTypes);
  GroupMessage::default_instance_ = new GroupMessage();
  GroupMessageInfo::default_instance_ = new GroupMessageInfo();
  GroupMessage::default_instance_->InitAsDefaultInstance();
  GroupMessageInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupMessageBuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupMessageBuf_2eproto {
  StaticDescriptorInitializer_GroupMessageBuf_2eproto() {
    protobuf_AddDesc_GroupMessageBuf_2eproto();
  }
} static_descriptor_initializer_GroupMessageBuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GroupMessage::kGroupIdFieldNumber;
const int GroupMessage::kMsgSizeFieldNumber;
const int GroupMessage::kGroupMessageInfoFieldNumber;
#endif  // !_MSC_VER

GroupMessage::GroupMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupMessage::InitAsDefaultInstance() {
}

GroupMessage::GroupMessage(const GroupMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupMessage::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  msgsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMessage::~GroupMessage() {
  SharedDtor();
}

void GroupMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMessage_descriptor_;
}

const GroupMessage& GroupMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupMessageBuf_2eproto();
  return *default_instance_;
}

GroupMessage* GroupMessage::default_instance_ = NULL;

GroupMessage* GroupMessage::New() const {
  return new GroupMessage;
}

void GroupMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    msgsize_ = 0;
  }
  groupmessageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgSize;
        break;
      }

      // required int32 msgSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgsize_)));
          set_has_msgsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_groupMessageInfo;
        break;
      }

      // repeated .com.huizhi.im.protobuf.GroupMessageInfo groupMessageInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupMessageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupmessageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_groupMessageInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // required int32 msgSize = 2;
  if (has_msgsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgsize(), output);
  }

  // repeated .com.huizhi.im.protobuf.GroupMessageInfo groupMessageInfo = 3;
  for (int i = 0; i < this->groupmessageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groupmessageinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // required int32 msgSize = 2;
  if (has_msgsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgsize(), target);
  }

  // repeated .com.huizhi.im.protobuf.GroupMessageInfo groupMessageInfo = 3;
  for (int i = 0; i < this->groupmessageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->groupmessageinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 msgSize = 2;
    if (has_msgsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgsize());
    }

  }
  // repeated .com.huizhi.im.protobuf.GroupMessageInfo groupMessageInfo = 3;
  total_size += 1 * this->groupmessageinfo_size();
  for (int i = 0; i < this->groupmessageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupmessageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMessage::MergeFrom(const GroupMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupmessageinfo_.MergeFrom(from.groupmessageinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_msgsize()) {
      set_msgsize(from.msgsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessage::CopyFrom(const GroupMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < groupmessageinfo_size(); i++) {
    if (!this->groupmessageinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GroupMessage::Swap(GroupMessage* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(msgsize_, other->msgsize_);
    groupmessageinfo_.Swap(&other->groupmessageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMessage_descriptor_;
  metadata.reflection = GroupMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMessageInfo::kTypeFieldNumber;
const int GroupMessageInfo::kUserIdFieldNumber;
const int GroupMessageInfo::kUserPhotoFieldNumber;
const int GroupMessageInfo::kNickNameFieldNumber;
const int GroupMessageInfo::kContentFieldNumber;
const int GroupMessageInfo::kCreatedFieldNumber;
#endif  // !_MSC_VER

GroupMessageInfo::GroupMessageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupMessageInfo::InitAsDefaultInstance() {
}

GroupMessageInfo::GroupMessageInfo(const GroupMessageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupMessageInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  userid_ = 0;
  userphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  created_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMessageInfo::~GroupMessageInfo() {
  SharedDtor();
}

void GroupMessageInfo::SharedDtor() {
  if (userphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete userphoto_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GroupMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMessageInfo_descriptor_;
}

const GroupMessageInfo& GroupMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupMessageBuf_2eproto();
  return *default_instance_;
}

GroupMessageInfo* GroupMessageInfo::default_instance_ = NULL;

GroupMessageInfo* GroupMessageInfo::New() const {
  return new GroupMessageInfo;
}

void GroupMessageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    userid_ = 0;
    if (has_userphoto()) {
      if (userphoto_ != &::google::protobuf::internal::kEmptyString) {
        userphoto_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    created_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupMessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userPhoto;
        break;
      }

      // optional string userPhoto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPhoto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userphoto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userphoto().data(), this->userphoto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickName;
        break;
      }

      // optional string nickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // required bytes content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_created;
        break;
      }

      // required int64 created = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupMessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string userPhoto = 3;
  if (has_userphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userphoto().data(), this->userphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userphoto(), output);
  }

  // optional string nickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // required bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->content(), output);
  }

  // required int64 created = 6;
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->created(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupMessageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string userPhoto = 3;
  if (has_userphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userphoto().data(), this->userphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userphoto(), target);
  }

  // optional string nickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // required bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  // required int64 created = 6;
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->created(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupMessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string userPhoto = 3;
    if (has_userphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userphoto());
    }

    // optional string nickName = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required bytes content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required int64 created = 6;
    if (has_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupMessageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMessageInfo::MergeFrom(const GroupMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userphoto()) {
      set_userphoto(from.userphoto());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupMessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessageInfo::CopyFrom(const GroupMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  return true;
}

void GroupMessageInfo::Swap(GroupMessageInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(userid_, other->userid_);
    std::swap(userphoto_, other->userphoto_);
    std::swap(nickname_, other->nickname_);
    std::swap(content_, other->content_);
    std::swap(created_, other->created_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMessageInfo_descriptor_;
  metadata.reflection = GroupMessageInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

// @@protoc_insertion_point(global_scope)
