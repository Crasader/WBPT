// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FastChatInfoBuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FastChatInfoBuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* FastChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToUsers_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FastChatInfoBuf_2eproto() {
  protobuf_AddDesc_FastChatInfoBuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FastChatInfoBuf.proto");
  GOOGLE_CHECK(file != NULL);
  FastChatInfo_descriptor_ = file->message_type(0);
  static const int FastChatInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, fromuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, fromuserphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, fromnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, tousers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, messageid_),
  };
  FastChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastChatInfo_descriptor_,
      FastChatInfo::default_instance_,
      FastChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastChatInfo));
  FastResponse_descriptor_ = file->message_type(1);
  static const int FastResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, fromuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, touserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, messageid_),
  };
  FastResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastResponse_descriptor_,
      FastResponse::default_instance_,
      FastResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastResponse));
  ToUsers_descriptor_ = file->message_type(2);
  static const int ToUsers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToUsers, uid_),
  };
  ToUsers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToUsers_descriptor_,
      ToUsers::default_instance_,
      ToUsers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToUsers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToUsers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToUsers));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FastChatInfoBuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastChatInfo_descriptor_, &FastChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastResponse_descriptor_, &FastResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToUsers_descriptor_, &ToUsers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FastChatInfoBuf_2eproto() {
  delete FastChatInfo::default_instance_;
  delete FastChatInfo_reflection_;
  delete FastResponse::default_instance_;
  delete FastResponse_reflection_;
  delete ToUsers::default_instance_;
  delete ToUsers_reflection_;
}

void protobuf_AddDesc_FastChatInfoBuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025FastChatInfoBuf.proto\022\026com.huizhi.im.p"
    "rotobuf\"\335\001\n\014FastChatInfo\022\022\n\nfromUserId\030\001"
    " \002(\005\022\025\n\rfromUserPhoto\030\002 \001(\t\022\024\n\014fromNickN"
    "ame\030\003 \001(\t\0220\n\007toUsers\030\004 \003(\0132\037.com.huizhi."
    "im.protobuf.ToUsers\022\023\n\013messageType\030\005 \002(\005"
    "\022\023\n\013contentType\030\006 \002(\005\022\017\n\007content\030\007 \002(\014\022\014"
    "\n\004time\030\010 \001(\003\022\021\n\tmessageId\030\t \001(\003\"h\n\014FastR"
    "esponse\022\016\n\006result\030\001 \002(\005\022\022\n\nfromUserId\030\002 "
    "\002(\005\022\020\n\010toUserId\030\003 \002(\005\022\017\n\007created\030\004 \002(\003\022\021"
    "\n\tmessageId\030\005 \001(\003\"\026\n\007ToUsers\022\013\n\003uid\030\001 \002("
    "\005B\021B\017FastChatInfoBuf", 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FastChatInfoBuf.proto", &protobuf_RegisterTypes);
  FastChatInfo::default_instance_ = new FastChatInfo();
  FastResponse::default_instance_ = new FastResponse();
  ToUsers::default_instance_ = new ToUsers();
  FastChatInfo::default_instance_->InitAsDefaultInstance();
  FastResponse::default_instance_->InitAsDefaultInstance();
  ToUsers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FastChatInfoBuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FastChatInfoBuf_2eproto {
  StaticDescriptorInitializer_FastChatInfoBuf_2eproto() {
    protobuf_AddDesc_FastChatInfoBuf_2eproto();
  }
} static_descriptor_initializer_FastChatInfoBuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FastChatInfo::kFromUserIdFieldNumber;
const int FastChatInfo::kFromUserPhotoFieldNumber;
const int FastChatInfo::kFromNickNameFieldNumber;
const int FastChatInfo::kToUsersFieldNumber;
const int FastChatInfo::kMessageTypeFieldNumber;
const int FastChatInfo::kContentTypeFieldNumber;
const int FastChatInfo::kContentFieldNumber;
const int FastChatInfo::kTimeFieldNumber;
const int FastChatInfo::kMessageIdFieldNumber;
#endif  // !_MSC_VER

FastChatInfo::FastChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FastChatInfo::InitAsDefaultInstance() {
}

FastChatInfo::FastChatInfo(const FastChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FastChatInfo::SharedCtor() {
  _cached_size_ = 0;
  fromuserid_ = 0;
  fromuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messagetype_ = 0;
  contenttype_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  messageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastChatInfo::~FastChatInfo() {
  SharedDtor();
}

void FastChatInfo::SharedDtor() {
  if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete fromuserphoto_;
  }
  if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete fromnickname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void FastChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastChatInfo_descriptor_;
}

const FastChatInfo& FastChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FastChatInfoBuf_2eproto();
  return *default_instance_;
}

FastChatInfo* FastChatInfo::default_instance_ = NULL;

FastChatInfo* FastChatInfo::New() const {
  return new FastChatInfo;
}

void FastChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromuserid_ = 0;
    if (has_fromuserphoto()) {
      if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
        fromuserphoto_->clear();
      }
    }
    if (has_fromnickname()) {
      if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
        fromnickname_->clear();
      }
    }
    messagetype_ = 0;
    contenttype_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    messageid_ = GOOGLE_LONGLONG(0);
  }
  tousers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fromUserId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromuserid_)));
          set_has_fromuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fromUserPhoto;
        break;
      }

      // optional string fromUserPhoto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromUserPhoto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromuserphoto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromuserphoto().data(), this->fromuserphoto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fromNickName;
        break;
      }

      // optional string fromNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromnickname().data(), this->fromnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toUsers;
        break;
      }

      // repeated .com.huizhi.im.protobuf.ToUsers toUsers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toUsers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tousers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toUsers;
        if (input->ExpectTag(40)) goto parse_messageType;
        break;
      }

      // required int32 messageType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contentType;
        break;
      }

      // required int32 contentType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // required bytes content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional int64 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_messageId;
        break;
      }

      // optional int64 messageId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FastChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fromUserId = 1;
  if (has_fromuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromuserid(), output);
  }

  // optional string fromUserPhoto = 2;
  if (has_fromuserphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuserphoto().data(), this->fromuserphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fromuserphoto(), output);
  }

  // optional string fromNickName = 3;
  if (has_fromnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromnickname().data(), this->fromnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fromnickname(), output);
  }

  // repeated .com.huizhi.im.protobuf.ToUsers toUsers = 4;
  for (int i = 0; i < this->tousers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tousers(i), output);
  }

  // required int32 messageType = 5;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->messagetype(), output);
  }

  // required int32 contentType = 6;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->contenttype(), output);
  }

  // required bytes content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->content(), output);
  }

  // optional int64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time(), output);
  }

  // optional int64 messageId = 9;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FastChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fromUserId = 1;
  if (has_fromuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromuserid(), target);
  }

  // optional string fromUserPhoto = 2;
  if (has_fromuserphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuserphoto().data(), this->fromuserphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromuserphoto(), target);
  }

  // optional string fromNickName = 3;
  if (has_fromnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromnickname().data(), this->fromnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromnickname(), target);
  }

  // repeated .com.huizhi.im.protobuf.ToUsers toUsers = 4;
  for (int i = 0; i < this->tousers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tousers(i), target);
  }

  // required int32 messageType = 5;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->messagetype(), target);
  }

  // required int32 contentType = 6;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->contenttype(), target);
  }

  // required bytes content = 7;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  // optional int64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time(), target);
  }

  // optional int64 messageId = 9;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FastChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fromUserId = 1;
    if (has_fromuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromuserid());
    }

    // optional string fromUserPhoto = 2;
    if (has_fromuserphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromuserphoto());
    }

    // optional string fromNickName = 3;
    if (has_fromnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromnickname());
    }

    // required int32 messageType = 5;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagetype());
    }

    // required int32 contentType = 6;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contenttype());
    }

    // required bytes content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 messageId = 9;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

  }
  // repeated .com.huizhi.im.protobuf.ToUsers toUsers = 4;
  total_size += 1 * this->tousers_size();
  for (int i = 0; i < this->tousers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tousers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastChatInfo::MergeFrom(const FastChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tousers_.MergeFrom(from.tousers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromuserid()) {
      set_fromuserid(from.fromuserid());
    }
    if (from.has_fromuserphoto()) {
      set_fromuserphoto(from.fromuserphoto());
    }
    if (from.has_fromnickname()) {
      set_fromnickname(from.fromnickname());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastChatInfo::CopyFrom(const FastChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000071) != 0x00000071) return false;

  for (int i = 0; i < tousers_size(); i++) {
    if (!this->tousers(i).IsInitialized()) return false;
  }
  return true;
}

void FastChatInfo::Swap(FastChatInfo* other) {
  if (other != this) {
    std::swap(fromuserid_, other->fromuserid_);
    std::swap(fromuserphoto_, other->fromuserphoto_);
    std::swap(fromnickname_, other->fromnickname_);
    tousers_.Swap(&other->tousers_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(content_, other->content_);
    std::swap(time_, other->time_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastChatInfo_descriptor_;
  metadata.reflection = FastChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FastResponse::kResultFieldNumber;
const int FastResponse::kFromUserIdFieldNumber;
const int FastResponse::kToUserIdFieldNumber;
const int FastResponse::kCreatedFieldNumber;
const int FastResponse::kMessageIdFieldNumber;
#endif  // !_MSC_VER

FastResponse::FastResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FastResponse::InitAsDefaultInstance() {
}

FastResponse::FastResponse(const FastResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FastResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fromuserid_ = 0;
  touserid_ = 0;
  created_ = GOOGLE_LONGLONG(0);
  messageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastResponse::~FastResponse() {
  SharedDtor();
}

void FastResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FastResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastResponse_descriptor_;
}

const FastResponse& FastResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FastChatInfoBuf_2eproto();
  return *default_instance_;
}

FastResponse* FastResponse::default_instance_ = NULL;

FastResponse* FastResponse::New() const {
  return new FastResponse;
}

void FastResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    fromuserid_ = 0;
    touserid_ = 0;
    created_ = GOOGLE_LONGLONG(0);
    messageid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromUserId;
        break;
      }

      // required int32 fromUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromuserid_)));
          set_has_fromuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toUserId;
        break;
      }

      // required int32 toUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &touserid_)));
          set_has_touserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_created;
        break;
      }

      // required int64 created = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_messageId;
        break;
      }

      // optional int64 messageId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FastResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 fromUserId = 2;
  if (has_fromuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fromuserid(), output);
  }

  // required int32 toUserId = 3;
  if (has_touserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->touserid(), output);
  }

  // required int64 created = 4;
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->created(), output);
  }

  // optional int64 messageId = 5;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FastResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 fromUserId = 2;
  if (has_fromuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fromuserid(), target);
  }

  // required int32 toUserId = 3;
  if (has_touserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->touserid(), target);
  }

  // required int64 created = 4;
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->created(), target);
  }

  // optional int64 messageId = 5;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FastResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 fromUserId = 2;
    if (has_fromuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromuserid());
    }

    // required int32 toUserId = 3;
    if (has_touserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->touserid());
    }

    // required int64 created = 4;
    if (has_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created());
    }

    // optional int64 messageId = 5;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastResponse::MergeFrom(const FastResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fromuserid()) {
      set_fromuserid(from.fromuserid());
    }
    if (from.has_touserid()) {
      set_touserid(from.touserid());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastResponse::CopyFrom(const FastResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FastResponse::Swap(FastResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fromuserid_, other->fromuserid_);
    std::swap(touserid_, other->touserid_);
    std::swap(created_, other->created_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastResponse_descriptor_;
  metadata.reflection = FastResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToUsers::kUidFieldNumber;
#endif  // !_MSC_VER

ToUsers::ToUsers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToUsers::InitAsDefaultInstance() {
}

ToUsers::ToUsers(const ToUsers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToUsers::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToUsers::~ToUsers() {
  SharedDtor();
}

void ToUsers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToUsers_descriptor_;
}

const ToUsers& ToUsers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FastChatInfoBuf_2eproto();
  return *default_instance_;
}

ToUsers* ToUsers::default_instance_ = NULL;

ToUsers* ToUsers::New() const {
  return new ToUsers;
}

void ToUsers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToUsers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToUsers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToUsers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToUsers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToUsers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToUsers::MergeFrom(const ToUsers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToUsers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToUsers::CopyFrom(const ToUsers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToUsers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToUsers::Swap(ToUsers* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToUsers_descriptor_;
  metadata.reflection = ToUsers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

// @@protoc_insertion_point(global_scope)
