// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupJoinRequestBuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupJoinRequestBuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* GroupJoinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJoinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupJoinResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJoinResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GroupJoinRequestBuf_2eproto() {
  protobuf_AddDesc_GroupJoinRequestBuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GroupJoinRequestBuf.proto");
  GOOGLE_CHECK(file != NULL);
  GroupJoinRequest_descriptor_ = file->message_type(0);
  static const int GroupJoinRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinRequest, type_),
  };
  GroupJoinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJoinRequest_descriptor_,
      GroupJoinRequest::default_instance_,
      GroupJoinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJoinRequest));
  GroupJoinResponse_descriptor_ = file->message_type(1);
  static const int GroupJoinResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResponse, userid_),
  };
  GroupJoinResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJoinResponse_descriptor_,
      GroupJoinResponse::default_instance_,
      GroupJoinResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJoinResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GroupJoinRequestBuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJoinRequest_descriptor_, &GroupJoinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJoinResponse_descriptor_, &GroupJoinResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GroupJoinRequestBuf_2eproto() {
  delete GroupJoinRequest::default_instance_;
  delete GroupJoinRequest_reflection_;
  delete GroupJoinResponse::default_instance_;
  delete GroupJoinResponse_reflection_;
}

void protobuf_AddDesc_GroupJoinRequestBuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031GroupJoinRequestBuf.proto\022\026com.huizhi."
    "im.protobuf\"A\n\020GroupJoinRequest\022\017\n\007group"
    "Id\030\001 \002(\005\022\016\n\006userId\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\"3"
    "\n\021GroupJoinResponse\022\016\n\006result\030\001 \002(\005\022\016\n\006u"
    "serId\030\002 \002(\005B\025B\023GroupJoinRequestBuf", 194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GroupJoinRequestBuf.proto", &protobuf_RegisterTypes);
  GroupJoinRequest::default_instance_ = new GroupJoinRequest();
  GroupJoinResponse::default_instance_ = new GroupJoinResponse();
  GroupJoinRequest::default_instance_->InitAsDefaultInstance();
  GroupJoinResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupJoinRequestBuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupJoinRequestBuf_2eproto {
  StaticDescriptorInitializer_GroupJoinRequestBuf_2eproto() {
    protobuf_AddDesc_GroupJoinRequestBuf_2eproto();
  }
} static_descriptor_initializer_GroupJoinRequestBuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GroupJoinRequest::kGroupIdFieldNumber;
const int GroupJoinRequest::kUserIdFieldNumber;
const int GroupJoinRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

GroupJoinRequest::GroupJoinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJoinRequest::InitAsDefaultInstance() {
}

GroupJoinRequest::GroupJoinRequest(const GroupJoinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJoinRequest::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  userid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJoinRequest::~GroupJoinRequest() {
  SharedDtor();
}

void GroupJoinRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupJoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJoinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJoinRequest_descriptor_;
}

const GroupJoinRequest& GroupJoinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupJoinRequestBuf_2eproto();
  return *default_instance_;
}

GroupJoinRequest* GroupJoinRequest::default_instance_ = NULL;

GroupJoinRequest* GroupJoinRequest::New() const {
  return new GroupJoinRequest;
}

void GroupJoinRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    userid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJoinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJoinRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJoinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJoinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJoinRequest::MergeFrom(const GroupJoinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJoinRequest::CopyFrom(const GroupJoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJoinRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupJoinRequest::Swap(GroupJoinRequest* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJoinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJoinRequest_descriptor_;
  metadata.reflection = GroupJoinRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupJoinResponse::kResultFieldNumber;
const int GroupJoinResponse::kUserIdFieldNumber;
#endif  // !_MSC_VER

GroupJoinResponse::GroupJoinResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJoinResponse::InitAsDefaultInstance() {
}

GroupJoinResponse::GroupJoinResponse(const GroupJoinResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJoinResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJoinResponse::~GroupJoinResponse() {
  SharedDtor();
}

void GroupJoinResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupJoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJoinResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJoinResponse_descriptor_;
}

const GroupJoinResponse& GroupJoinResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupJoinRequestBuf_2eproto();
  return *default_instance_;
}

GroupJoinResponse* GroupJoinResponse::default_instance_ = NULL;

GroupJoinResponse* GroupJoinResponse::New() const {
  return new GroupJoinResponse;
}

void GroupJoinResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJoinResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJoinResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJoinResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJoinResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJoinResponse::MergeFrom(const GroupJoinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJoinResponse::CopyFrom(const GroupJoinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJoinResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupJoinResponse::Swap(GroupJoinResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJoinResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJoinResponse_descriptor_;
  metadata.reflection = GroupJoinResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

// @@protoc_insertion_point(global_scope)
