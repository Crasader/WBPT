// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupRequestBuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupRequestBuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* GroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GroupRequestBuf_2eproto() {
  protobuf_AddDesc_GroupRequestBuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GroupRequestBuf.proto");
  GOOGLE_CHECK(file != NULL);
  GroupRequest_descriptor_ = file->message_type(0);
  static const int GroupRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, userphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, size_),
  };
  GroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupRequest_descriptor_,
      GroupRequest::default_instance_,
      GroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GroupRequestBuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupRequest_descriptor_, &GroupRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GroupRequestBuf_2eproto() {
  delete GroupRequest::default_instance_;
  delete GroupRequest_reflection_;
}

void protobuf_AddDesc_GroupRequestBuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025GroupRequestBuf.proto\022\026com.huizhi.im.p"
    "rotobuf\"s\n\014GroupRequest\022\017\n\007groupId\030\001 \002(\005"
    "\022\016\n\006userId\030\002 \002(\005\022\021\n\tuserPhoto\030\003 \001(\t\022\020\n\010n"
    "ickName\030\004 \001(\t\022\017\n\007created\030\005 \002(\003\022\014\n\004size\030\006"
    " \002(\005B\021B\017GroupRequestBuf", 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GroupRequestBuf.proto", &protobuf_RegisterTypes);
  GroupRequest::default_instance_ = new GroupRequest();
  GroupRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupRequestBuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupRequestBuf_2eproto {
  StaticDescriptorInitializer_GroupRequestBuf_2eproto() {
    protobuf_AddDesc_GroupRequestBuf_2eproto();
  }
} static_descriptor_initializer_GroupRequestBuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GroupRequest::kGroupIdFieldNumber;
const int GroupRequest::kUserIdFieldNumber;
const int GroupRequest::kUserPhotoFieldNumber;
const int GroupRequest::kNickNameFieldNumber;
const int GroupRequest::kCreatedFieldNumber;
const int GroupRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

GroupRequest::GroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupRequest::InitAsDefaultInstance() {
}

GroupRequest::GroupRequest(const GroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupRequest::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  userid_ = 0;
  userphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  created_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupRequest::~GroupRequest() {
  SharedDtor();
}

void GroupRequest::SharedDtor() {
  if (userphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete userphoto_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void GroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupRequest_descriptor_;
}

const GroupRequest& GroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupRequestBuf_2eproto();
  return *default_instance_;
}

GroupRequest* GroupRequest::default_instance_ = NULL;

GroupRequest* GroupRequest::New() const {
  return new GroupRequest;
}

void GroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    userid_ = 0;
    if (has_userphoto()) {
      if (userphoto_ != &::google::protobuf::internal::kEmptyString) {
        userphoto_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    created_ = GOOGLE_LONGLONG(0);
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userPhoto;
        break;
      }

      // optional string userPhoto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPhoto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userphoto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userphoto().data(), this->userphoto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickName;
        break;
      }

      // optional string nickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_created;
        break;
      }

      // required int64 created = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }

      // required int32 size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string userPhoto = 3;
  if (has_userphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userphoto().data(), this->userphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userphoto(), output);
  }

  // optional string nickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // required int64 created = 5;
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->created(), output);
  }

  // required int32 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string userPhoto = 3;
  if (has_userphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userphoto().data(), this->userphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userphoto(), target);
  }

  // optional string nickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // required int64 created = 5;
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->created(), target);
  }

  // required int32 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string userPhoto = 3;
    if (has_userphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userphoto());
    }

    // optional string nickName = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int64 created = 5;
    if (has_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created());
    }

    // required int32 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupRequest::MergeFrom(const GroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userphoto()) {
      set_userphoto(from.userphoto());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRequest::CopyFrom(const GroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  return true;
}

void GroupRequest::Swap(GroupRequest* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(userid_, other->userid_);
    std::swap(userphoto_, other->userphoto_);
    std::swap(nickname_, other->nickname_);
    std::swap(created_, other->created_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupRequest_descriptor_;
  metadata.reflection = GroupRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

// @@protoc_insertion_point(global_scope)
