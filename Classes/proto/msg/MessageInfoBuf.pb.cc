// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageInfoBuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageInfoBuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* MessageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageInfoBuf_2eproto() {
  protobuf_AddDesc_MessageInfoBuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageInfoBuf.proto");
  GOOGLE_CHECK(file != NULL);
  MessageInfo_descriptor_ = file->message_type(0);
  static const int MessageInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, fromuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, fromuserphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, fromnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, touserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, messageid_),
  };
  MessageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageInfo_descriptor_,
      MessageInfo::default_instance_,
      MessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageInfo));
  MessageResponse_descriptor_ = file->message_type(1);
  static const int MessageResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponse, fromuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponse, touserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponse, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponse, messageid_),
  };
  MessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageResponse_descriptor_,
      MessageResponse::default_instance_,
      MessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageInfoBuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageInfo_descriptor_, &MessageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageResponse_descriptor_, &MessageResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageInfoBuf_2eproto() {
  delete MessageInfo::default_instance_;
  delete MessageInfo_reflection_;
  delete MessageResponse::default_instance_;
  delete MessageResponse_reflection_;
}

void protobuf_AddDesc_MessageInfoBuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MessageInfoBuf.proto\022\026com.huizhi.im.pr"
    "otobuf\"\274\001\n\013MessageInfo\022\022\n\nfromUserId\030\001 \002"
    "(\005\022\025\n\rfromUserPhoto\030\002 \001(\t\022\024\n\014fromNickNam"
    "e\030\003 \001(\t\022\020\n\010toUserId\030\004 \002(\005\022\023\n\013messageType"
    "\030\005 \002(\005\022\023\n\013contentType\030\006 \002(\005\022\017\n\007content\030\007"
    " \002(\014\022\014\n\004time\030\010 \001(\003\022\021\n\tmessageId\030\t \001(\003\"k\n"
    "\017MessageResponse\022\016\n\006result\030\001 \002(\005\022\022\n\nfrom"
    "UserId\030\002 \002(\005\022\020\n\010toUserId\030\003 \002(\005\022\017\n\007create"
    "d\030\004 \002(\003\022\021\n\tmessageId\030\005 \001(\003B\020B\016MessageInf"
    "oBuf", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageInfoBuf.proto", &protobuf_RegisterTypes);
  MessageInfo::default_instance_ = new MessageInfo();
  MessageResponse::default_instance_ = new MessageResponse();
  MessageInfo::default_instance_->InitAsDefaultInstance();
  MessageResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageInfoBuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageInfoBuf_2eproto {
  StaticDescriptorInitializer_MessageInfoBuf_2eproto() {
    protobuf_AddDesc_MessageInfoBuf_2eproto();
  }
} static_descriptor_initializer_MessageInfoBuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessageInfo::kFromUserIdFieldNumber;
const int MessageInfo::kFromUserPhotoFieldNumber;
const int MessageInfo::kFromNickNameFieldNumber;
const int MessageInfo::kToUserIdFieldNumber;
const int MessageInfo::kMessageTypeFieldNumber;
const int MessageInfo::kContentTypeFieldNumber;
const int MessageInfo::kContentFieldNumber;
const int MessageInfo::kTimeFieldNumber;
const int MessageInfo::kMessageIdFieldNumber;
#endif  // !_MSC_VER

MessageInfo::MessageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageInfo::InitAsDefaultInstance() {
}

MessageInfo::MessageInfo(const MessageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageInfo::SharedCtor() {
  _cached_size_ = 0;
  fromuserid_ = 0;
  fromuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  touserid_ = 0;
  messagetype_ = 0;
  contenttype_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  messageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageInfo::~MessageInfo() {
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete fromuserphoto_;
  }
  if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete fromnickname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageInfo_descriptor_;
}

const MessageInfo& MessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageInfoBuf_2eproto();
  return *default_instance_;
}

MessageInfo* MessageInfo::default_instance_ = NULL;

MessageInfo* MessageInfo::New() const {
  return new MessageInfo;
}

void MessageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromuserid_ = 0;
    if (has_fromuserphoto()) {
      if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
        fromuserphoto_->clear();
      }
    }
    if (has_fromnickname()) {
      if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
        fromnickname_->clear();
      }
    }
    touserid_ = 0;
    messagetype_ = 0;
    contenttype_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    messageid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fromUserId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromuserid_)));
          set_has_fromuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fromUserPhoto;
        break;
      }

      // optional string fromUserPhoto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromUserPhoto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromuserphoto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromuserphoto().data(), this->fromuserphoto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fromNickName;
        break;
      }

      // optional string fromNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromnickname().data(), this->fromnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_toUserId;
        break;
      }

      // required int32 toUserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &touserid_)));
          set_has_touserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_messageType;
        break;
      }

      // required int32 messageType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contentType;
        break;
      }

      // required int32 contentType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // required bytes content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional int64 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_messageId;
        break;
      }

      // optional int64 messageId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fromUserId = 1;
  if (has_fromuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromuserid(), output);
  }

  // optional string fromUserPhoto = 2;
  if (has_fromuserphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuserphoto().data(), this->fromuserphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fromuserphoto(), output);
  }

  // optional string fromNickName = 3;
  if (has_fromnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromnickname().data(), this->fromnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fromnickname(), output);
  }

  // required int32 toUserId = 4;
  if (has_touserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->touserid(), output);
  }

  // required int32 messageType = 5;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->messagetype(), output);
  }

  // required int32 contentType = 6;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->contenttype(), output);
  }

  // required bytes content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->content(), output);
  }

  // optional int64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time(), output);
  }

  // optional int64 messageId = 9;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fromUserId = 1;
  if (has_fromuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromuserid(), target);
  }

  // optional string fromUserPhoto = 2;
  if (has_fromuserphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuserphoto().data(), this->fromuserphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromuserphoto(), target);
  }

  // optional string fromNickName = 3;
  if (has_fromnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromnickname().data(), this->fromnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromnickname(), target);
  }

  // required int32 toUserId = 4;
  if (has_touserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->touserid(), target);
  }

  // required int32 messageType = 5;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->messagetype(), target);
  }

  // required int32 contentType = 6;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->contenttype(), target);
  }

  // required bytes content = 7;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  // optional int64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time(), target);
  }

  // optional int64 messageId = 9;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fromUserId = 1;
    if (has_fromuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromuserid());
    }

    // optional string fromUserPhoto = 2;
    if (has_fromuserphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromuserphoto());
    }

    // optional string fromNickName = 3;
    if (has_fromnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromnickname());
    }

    // required int32 toUserId = 4;
    if (has_touserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->touserid());
    }

    // required int32 messageType = 5;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagetype());
    }

    // required int32 contentType = 6;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contenttype());
    }

    // required bytes content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 messageId = 9;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromuserid()) {
      set_fromuserid(from.fromuserid());
    }
    if (from.has_fromuserphoto()) {
      set_fromuserphoto(from.fromuserphoto());
    }
    if (from.has_fromnickname()) {
      set_fromnickname(from.fromnickname());
    }
    if (from.has_touserid()) {
      set_touserid(from.touserid());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;

  return true;
}

void MessageInfo::Swap(MessageInfo* other) {
  if (other != this) {
    std::swap(fromuserid_, other->fromuserid_);
    std::swap(fromuserphoto_, other->fromuserphoto_);
    std::swap(fromnickname_, other->fromnickname_);
    std::swap(touserid_, other->touserid_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(content_, other->content_);
    std::swap(time_, other->time_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageInfo_descriptor_;
  metadata.reflection = MessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageResponse::kResultFieldNumber;
const int MessageResponse::kFromUserIdFieldNumber;
const int MessageResponse::kToUserIdFieldNumber;
const int MessageResponse::kCreatedFieldNumber;
const int MessageResponse::kMessageIdFieldNumber;
#endif  // !_MSC_VER

MessageResponse::MessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageResponse::InitAsDefaultInstance() {
}

MessageResponse::MessageResponse(const MessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fromuserid_ = 0;
  touserid_ = 0;
  created_ = GOOGLE_LONGLONG(0);
  messageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponse::~MessageResponse() {
  SharedDtor();
}

void MessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponse_descriptor_;
}

const MessageResponse& MessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageInfoBuf_2eproto();
  return *default_instance_;
}

MessageResponse* MessageResponse::default_instance_ = NULL;

MessageResponse* MessageResponse::New() const {
  return new MessageResponse;
}

void MessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    fromuserid_ = 0;
    touserid_ = 0;
    created_ = GOOGLE_LONGLONG(0);
    messageid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromUserId;
        break;
      }

      // required int32 fromUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromuserid_)));
          set_has_fromuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toUserId;
        break;
      }

      // required int32 toUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &touserid_)));
          set_has_touserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_created;
        break;
      }

      // required int64 created = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_messageId;
        break;
      }

      // optional int64 messageId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 fromUserId = 2;
  if (has_fromuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fromuserid(), output);
  }

  // required int32 toUserId = 3;
  if (has_touserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->touserid(), output);
  }

  // required int64 created = 4;
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->created(), output);
  }

  // optional int64 messageId = 5;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 fromUserId = 2;
  if (has_fromuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fromuserid(), target);
  }

  // required int32 toUserId = 3;
  if (has_touserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->touserid(), target);
  }

  // required int64 created = 4;
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->created(), target);
  }

  // optional int64 messageId = 5;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 fromUserId = 2;
    if (has_fromuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromuserid());
    }

    // required int32 toUserId = 3;
    if (has_touserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->touserid());
    }

    // required int64 created = 4;
    if (has_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created());
    }

    // optional int64 messageId = 5;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageResponse::MergeFrom(const MessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fromuserid()) {
      set_fromuserid(from.fromuserid());
    }
    if (from.has_touserid()) {
      set_touserid(from.touserid());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponse::CopyFrom(const MessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MessageResponse::Swap(MessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fromuserid_, other->fromuserid_);
    std::swap(touserid_, other->touserid_);
    std::swap(created_, other->created_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponse_descriptor_;
  metadata.reflection = MessageResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

// @@protoc_insertion_point(global_scope)
