// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageInfoBuf.proto

#ifndef PROTOBUF_MessageInfoBuf_2eproto__INCLUDED
#define PROTOBUF_MessageInfoBuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageInfoBuf_2eproto();
void protobuf_AssignDesc_MessageInfoBuf_2eproto();
void protobuf_ShutdownFile_MessageInfoBuf_2eproto();

class MessageInfo;
class MessageResponse;

// ===================================================================

class MessageInfo : public ::google::protobuf::Message {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageInfo& default_instance();

  void Swap(MessageInfo* other);

  // implements Message ----------------------------------------------

  MessageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fromUserId = 1;
  inline bool has_fromuserid() const;
  inline void clear_fromuserid();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 fromuserid() const;
  inline void set_fromuserid(::google::protobuf::int32 value);

  // optional string fromUserPhoto = 2;
  inline bool has_fromuserphoto() const;
  inline void clear_fromuserphoto();
  static const int kFromUserPhotoFieldNumber = 2;
  inline const ::std::string& fromuserphoto() const;
  inline void set_fromuserphoto(const ::std::string& value);
  inline void set_fromuserphoto(const char* value);
  inline void set_fromuserphoto(const char* value, size_t size);
  inline ::std::string* mutable_fromuserphoto();
  inline ::std::string* release_fromuserphoto();
  inline void set_allocated_fromuserphoto(::std::string* fromuserphoto);

  // optional string fromNickName = 3;
  inline bool has_fromnickname() const;
  inline void clear_fromnickname();
  static const int kFromNickNameFieldNumber = 3;
  inline const ::std::string& fromnickname() const;
  inline void set_fromnickname(const ::std::string& value);
  inline void set_fromnickname(const char* value);
  inline void set_fromnickname(const char* value, size_t size);
  inline ::std::string* mutable_fromnickname();
  inline ::std::string* release_fromnickname();
  inline void set_allocated_fromnickname(::std::string* fromnickname);

  // required int32 toUserId = 4;
  inline bool has_touserid() const;
  inline void clear_touserid();
  static const int kToUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 touserid() const;
  inline void set_touserid(::google::protobuf::int32 value);

  // required int32 messageType = 5;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 5;
  inline ::google::protobuf::int32 messagetype() const;
  inline void set_messagetype(::google::protobuf::int32 value);

  // required int32 contentType = 6;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 6;
  inline ::google::protobuf::int32 contenttype() const;
  inline void set_contenttype(::google::protobuf::int32 value);

  // required bytes content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int64 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int64 messageId = 9;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 9;
  inline ::google::protobuf::int64 messageid() const;
  inline void set_messageid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.huizhi.im.protobuf.MessageInfo)
 private:
  inline void set_has_fromuserid();
  inline void clear_has_fromuserid();
  inline void set_has_fromuserphoto();
  inline void clear_has_fromuserphoto();
  inline void set_has_fromnickname();
  inline void clear_has_fromnickname();
  inline void set_has_touserid();
  inline void clear_has_touserid();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fromuserphoto_;
  ::google::protobuf::int32 fromuserid_;
  ::google::protobuf::int32 touserid_;
  ::std::string* fromnickname_;
  ::google::protobuf::int32 messagetype_;
  ::google::protobuf::int32 contenttype_;
  ::std::string* content_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_MessageInfoBuf_2eproto();
  friend void protobuf_AssignDesc_MessageInfoBuf_2eproto();
  friend void protobuf_ShutdownFile_MessageInfoBuf_2eproto();

  void InitAsDefaultInstance();
  static MessageInfo* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponse : public ::google::protobuf::Message {
 public:
  MessageResponse();
  virtual ~MessageResponse();

  MessageResponse(const MessageResponse& from);

  inline MessageResponse& operator=(const MessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponse& default_instance();

  void Swap(MessageResponse* other);

  // implements Message ----------------------------------------------

  MessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponse& from);
  void MergeFrom(const MessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 fromUserId = 2;
  inline bool has_fromuserid() const;
  inline void clear_fromuserid();
  static const int kFromUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 fromuserid() const;
  inline void set_fromuserid(::google::protobuf::int32 value);

  // required int32 toUserId = 3;
  inline bool has_touserid() const;
  inline void clear_touserid();
  static const int kToUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 touserid() const;
  inline void set_touserid(::google::protobuf::int32 value);

  // required int64 created = 4;
  inline bool has_created() const;
  inline void clear_created();
  static const int kCreatedFieldNumber = 4;
  inline ::google::protobuf::int64 created() const;
  inline void set_created(::google::protobuf::int64 value);

  // optional int64 messageId = 5;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 5;
  inline ::google::protobuf::int64 messageid() const;
  inline void set_messageid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.huizhi.im.protobuf.MessageResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fromuserid();
  inline void clear_has_fromuserid();
  inline void set_has_touserid();
  inline void clear_has_touserid();
  inline void set_has_created();
  inline void clear_has_created();
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 fromuserid_;
  ::google::protobuf::int64 created_;
  ::google::protobuf::int64 messageid_;
  ::google::protobuf::int32 touserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MessageInfoBuf_2eproto();
  friend void protobuf_AssignDesc_MessageInfoBuf_2eproto();
  friend void protobuf_ShutdownFile_MessageInfoBuf_2eproto();

  void InitAsDefaultInstance();
  static MessageResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageInfo

// required int32 fromUserId = 1;
inline bool MessageInfo::has_fromuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageInfo::set_has_fromuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageInfo::clear_has_fromuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageInfo::clear_fromuserid() {
  fromuserid_ = 0;
  clear_has_fromuserid();
}
inline ::google::protobuf::int32 MessageInfo::fromuserid() const {
  return fromuserid_;
}
inline void MessageInfo::set_fromuserid(::google::protobuf::int32 value) {
  set_has_fromuserid();
  fromuserid_ = value;
}

// optional string fromUserPhoto = 2;
inline bool MessageInfo::has_fromuserphoto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageInfo::set_has_fromuserphoto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageInfo::clear_has_fromuserphoto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageInfo::clear_fromuserphoto() {
  if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_->clear();
  }
  clear_has_fromuserphoto();
}
inline const ::std::string& MessageInfo::fromuserphoto() const {
  return *fromuserphoto_;
}
inline void MessageInfo::set_fromuserphoto(const ::std::string& value) {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  fromuserphoto_->assign(value);
}
inline void MessageInfo::set_fromuserphoto(const char* value) {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  fromuserphoto_->assign(value);
}
inline void MessageInfo::set_fromuserphoto(const char* value, size_t size) {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  fromuserphoto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageInfo::mutable_fromuserphoto() {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  return fromuserphoto_;
}
inline ::std::string* MessageInfo::release_fromuserphoto() {
  clear_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromuserphoto_;
    fromuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageInfo::set_allocated_fromuserphoto(::std::string* fromuserphoto) {
  if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete fromuserphoto_;
  }
  if (fromuserphoto) {
    set_has_fromuserphoto();
    fromuserphoto_ = fromuserphoto;
  } else {
    clear_has_fromuserphoto();
    fromuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fromNickName = 3;
inline bool MessageInfo::has_fromnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageInfo::set_has_fromnickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageInfo::clear_has_fromnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageInfo::clear_fromnickname() {
  if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
    fromnickname_->clear();
  }
  clear_has_fromnickname();
}
inline const ::std::string& MessageInfo::fromnickname() const {
  return *fromnickname_;
}
inline void MessageInfo::set_fromnickname(const ::std::string& value) {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  fromnickname_->assign(value);
}
inline void MessageInfo::set_fromnickname(const char* value) {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  fromnickname_->assign(value);
}
inline void MessageInfo::set_fromnickname(const char* value, size_t size) {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  fromnickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageInfo::mutable_fromnickname() {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  return fromnickname_;
}
inline ::std::string* MessageInfo::release_fromnickname() {
  clear_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromnickname_;
    fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageInfo::set_allocated_fromnickname(::std::string* fromnickname) {
  if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete fromnickname_;
  }
  if (fromnickname) {
    set_has_fromnickname();
    fromnickname_ = fromnickname;
  } else {
    clear_has_fromnickname();
    fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 toUserId = 4;
inline bool MessageInfo::has_touserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageInfo::set_has_touserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageInfo::clear_has_touserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageInfo::clear_touserid() {
  touserid_ = 0;
  clear_has_touserid();
}
inline ::google::protobuf::int32 MessageInfo::touserid() const {
  return touserid_;
}
inline void MessageInfo::set_touserid(::google::protobuf::int32 value) {
  set_has_touserid();
  touserid_ = value;
}

// required int32 messageType = 5;
inline bool MessageInfo::has_messagetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageInfo::set_has_messagetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageInfo::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageInfo::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::google::protobuf::int32 MessageInfo::messagetype() const {
  return messagetype_;
}
inline void MessageInfo::set_messagetype(::google::protobuf::int32 value) {
  set_has_messagetype();
  messagetype_ = value;
}

// required int32 contentType = 6;
inline bool MessageInfo::has_contenttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageInfo::set_has_contenttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageInfo::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageInfo::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
inline ::google::protobuf::int32 MessageInfo::contenttype() const {
  return contenttype_;
}
inline void MessageInfo::set_contenttype(::google::protobuf::int32 value) {
  set_has_contenttype();
  contenttype_ = value;
}

// required bytes content = 7;
inline bool MessageInfo::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageInfo::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MessageInfo::content() const {
  return *content_;
}
inline void MessageInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageInfo::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MessageInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 time = 8;
inline bool MessageInfo::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessageInfo::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MessageInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MessageInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 MessageInfo::time() const {
  return time_;
}
inline void MessageInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int64 messageId = 9;
inline bool MessageInfo::has_messageid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MessageInfo::set_has_messageid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MessageInfo::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MessageInfo::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 MessageInfo::messageid() const {
  return messageid_;
}
inline void MessageInfo::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
}

// -------------------------------------------------------------------

// MessageResponse

// required int32 result = 1;
inline bool MessageResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 MessageResponse::result() const {
  return result_;
}
inline void MessageResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 fromUserId = 2;
inline bool MessageResponse::has_fromuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageResponse::set_has_fromuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageResponse::clear_has_fromuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageResponse::clear_fromuserid() {
  fromuserid_ = 0;
  clear_has_fromuserid();
}
inline ::google::protobuf::int32 MessageResponse::fromuserid() const {
  return fromuserid_;
}
inline void MessageResponse::set_fromuserid(::google::protobuf::int32 value) {
  set_has_fromuserid();
  fromuserid_ = value;
}

// required int32 toUserId = 3;
inline bool MessageResponse::has_touserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageResponse::set_has_touserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageResponse::clear_has_touserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageResponse::clear_touserid() {
  touserid_ = 0;
  clear_has_touserid();
}
inline ::google::protobuf::int32 MessageResponse::touserid() const {
  return touserid_;
}
inline void MessageResponse::set_touserid(::google::protobuf::int32 value) {
  set_has_touserid();
  touserid_ = value;
}

// required int64 created = 4;
inline bool MessageResponse::has_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageResponse::set_has_created() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageResponse::clear_has_created() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageResponse::clear_created() {
  created_ = GOOGLE_LONGLONG(0);
  clear_has_created();
}
inline ::google::protobuf::int64 MessageResponse::created() const {
  return created_;
}
inline void MessageResponse::set_created(::google::protobuf::int64 value) {
  set_has_created();
  created_ = value;
}

// optional int64 messageId = 5;
inline bool MessageResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageResponse::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 MessageResponse::messageid() const {
  return messageid_;
}
inline void MessageResponse::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageInfoBuf_2eproto__INCLUDED
