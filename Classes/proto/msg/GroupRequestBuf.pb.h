// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupRequestBuf.proto

#ifndef PROTOBUF_GroupRequestBuf_2eproto__INCLUDED
#define PROTOBUF_GroupRequestBuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GroupRequestBuf_2eproto();
void protobuf_AssignDesc_GroupRequestBuf_2eproto();
void protobuf_ShutdownFile_GroupRequestBuf_2eproto();

class GroupRequest;

// ===================================================================

class GroupRequest : public ::google::protobuf::Message {
 public:
  GroupRequest();
  virtual ~GroupRequest();

  GroupRequest(const GroupRequest& from);

  inline GroupRequest& operator=(const GroupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupRequest& default_instance();

  void Swap(GroupRequest* other);

  // implements Message ----------------------------------------------

  GroupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupRequest& from);
  void MergeFrom(const GroupRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string userPhoto = 3;
  inline bool has_userphoto() const;
  inline void clear_userphoto();
  static const int kUserPhotoFieldNumber = 3;
  inline const ::std::string& userphoto() const;
  inline void set_userphoto(const ::std::string& value);
  inline void set_userphoto(const char* value);
  inline void set_userphoto(const char* value, size_t size);
  inline ::std::string* mutable_userphoto();
  inline ::std::string* release_userphoto();
  inline void set_allocated_userphoto(::std::string* userphoto);

  // optional string nickName = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int64 created = 5;
  inline bool has_created() const;
  inline void clear_created();
  static const int kCreatedFieldNumber = 5;
  inline ::google::protobuf::int64 created() const;
  inline void set_created(::google::protobuf::int64 value);

  // required int32 size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.huizhi.im.protobuf.GroupRequest)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_userphoto();
  inline void clear_has_userphoto();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_created();
  inline void clear_has_created();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 userid_;
  ::std::string* userphoto_;
  ::std::string* nickname_;
  ::google::protobuf::int64 created_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GroupRequestBuf_2eproto();
  friend void protobuf_AssignDesc_GroupRequestBuf_2eproto();
  friend void protobuf_ShutdownFile_GroupRequestBuf_2eproto();

  void InitAsDefaultInstance();
  static GroupRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// GroupRequest

// required int32 groupId = 1;
inline bool GroupRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupRequest::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 GroupRequest::groupid() const {
  return groupid_;
}
inline void GroupRequest::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 userId = 2;
inline bool GroupRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GroupRequest::userid() const {
  return userid_;
}
inline void GroupRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userPhoto = 3;
inline bool GroupRequest::has_userphoto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupRequest::set_has_userphoto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupRequest::clear_has_userphoto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupRequest::clear_userphoto() {
  if (userphoto_ != &::google::protobuf::internal::kEmptyString) {
    userphoto_->clear();
  }
  clear_has_userphoto();
}
inline const ::std::string& GroupRequest::userphoto() const {
  return *userphoto_;
}
inline void GroupRequest::set_userphoto(const ::std::string& value) {
  set_has_userphoto();
  if (userphoto_ == &::google::protobuf::internal::kEmptyString) {
    userphoto_ = new ::std::string;
  }
  userphoto_->assign(value);
}
inline void GroupRequest::set_userphoto(const char* value) {
  set_has_userphoto();
  if (userphoto_ == &::google::protobuf::internal::kEmptyString) {
    userphoto_ = new ::std::string;
  }
  userphoto_->assign(value);
}
inline void GroupRequest::set_userphoto(const char* value, size_t size) {
  set_has_userphoto();
  if (userphoto_ == &::google::protobuf::internal::kEmptyString) {
    userphoto_ = new ::std::string;
  }
  userphoto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupRequest::mutable_userphoto() {
  set_has_userphoto();
  if (userphoto_ == &::google::protobuf::internal::kEmptyString) {
    userphoto_ = new ::std::string;
  }
  return userphoto_;
}
inline ::std::string* GroupRequest::release_userphoto() {
  clear_has_userphoto();
  if (userphoto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userphoto_;
    userphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupRequest::set_allocated_userphoto(::std::string* userphoto) {
  if (userphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete userphoto_;
  }
  if (userphoto) {
    set_has_userphoto();
    userphoto_ = userphoto;
  } else {
    clear_has_userphoto();
    userphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickName = 4;
inline bool GroupRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupRequest::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& GroupRequest::nickname() const {
  return *nickname_;
}
inline void GroupRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GroupRequest::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GroupRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupRequest::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* GroupRequest::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 created = 5;
inline bool GroupRequest::has_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupRequest::set_has_created() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupRequest::clear_has_created() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupRequest::clear_created() {
  created_ = GOOGLE_LONGLONG(0);
  clear_has_created();
}
inline ::google::protobuf::int64 GroupRequest::created() const {
  return created_;
}
inline void GroupRequest::set_created(::google::protobuf::int64 value) {
  set_has_created();
  created_ = value;
}

// required int32 size = 6;
inline bool GroupRequest::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupRequest::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 GroupRequest::size() const {
  return size_;
}
inline void GroupRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GroupRequestBuf_2eproto__INCLUDED
