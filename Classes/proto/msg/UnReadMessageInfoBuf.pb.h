// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnReadMessageInfoBuf.proto

#ifndef PROTOBUF_UnReadMessageInfoBuf_2eproto__INCLUDED
#define PROTOBUF_UnReadMessageInfoBuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnReadMessageInfoBuf_2eproto();
void protobuf_AssignDesc_UnReadMessageInfoBuf_2eproto();
void protobuf_ShutdownFile_UnReadMessageInfoBuf_2eproto();

class UnReadMessageInfo;
class UnReadMessage;

// ===================================================================

class UnReadMessageInfo : public ::google::protobuf::Message {
 public:
  UnReadMessageInfo();
  virtual ~UnReadMessageInfo();

  UnReadMessageInfo(const UnReadMessageInfo& from);

  inline UnReadMessageInfo& operator=(const UnReadMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnReadMessageInfo& default_instance();

  void Swap(UnReadMessageInfo* other);

  // implements Message ----------------------------------------------

  UnReadMessageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnReadMessageInfo& from);
  void MergeFrom(const UnReadMessageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fromUserId = 1;
  inline bool has_fromuserid() const;
  inline void clear_fromuserid();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 fromuserid() const;
  inline void set_fromuserid(::google::protobuf::int32 value);

  // optional string fromUserPhoto = 2;
  inline bool has_fromuserphoto() const;
  inline void clear_fromuserphoto();
  static const int kFromUserPhotoFieldNumber = 2;
  inline const ::std::string& fromuserphoto() const;
  inline void set_fromuserphoto(const ::std::string& value);
  inline void set_fromuserphoto(const char* value);
  inline void set_fromuserphoto(const char* value, size_t size);
  inline ::std::string* mutable_fromuserphoto();
  inline ::std::string* release_fromuserphoto();
  inline void set_allocated_fromuserphoto(::std::string* fromuserphoto);

  // optional string fromNickName = 3;
  inline bool has_fromnickname() const;
  inline void clear_fromnickname();
  static const int kFromNickNameFieldNumber = 3;
  inline const ::std::string& fromnickname() const;
  inline void set_fromnickname(const ::std::string& value);
  inline void set_fromnickname(const char* value);
  inline void set_fromnickname(const char* value, size_t size);
  inline ::std::string* mutable_fromnickname();
  inline ::std::string* release_fromnickname();
  inline void set_allocated_fromnickname(::std::string* fromnickname);

  // required int32 toUserId = 4;
  inline bool has_touserid() const;
  inline void clear_touserid();
  static const int kToUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 touserid() const;
  inline void set_touserid(::google::protobuf::int32 value);

  // repeated .com.huizhi.im.protobuf.UnReadMessage messages = 5;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 5;
  inline const ::com::huizhi::im::protobuf::UnReadMessage& messages(int index) const;
  inline ::com::huizhi::im::protobuf::UnReadMessage* mutable_messages(int index);
  inline ::com::huizhi::im::protobuf::UnReadMessage* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::com::huizhi::im::protobuf::UnReadMessage >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::huizhi::im::protobuf::UnReadMessage >*
      mutable_messages();

  // @@protoc_insertion_point(class_scope:com.huizhi.im.protobuf.UnReadMessageInfo)
 private:
  inline void set_has_fromuserid();
  inline void clear_has_fromuserid();
  inline void set_has_fromuserphoto();
  inline void clear_has_fromuserphoto();
  inline void set_has_fromnickname();
  inline void clear_has_fromnickname();
  inline void set_has_touserid();
  inline void clear_has_touserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fromuserphoto_;
  ::google::protobuf::int32 fromuserid_;
  ::google::protobuf::int32 touserid_;
  ::std::string* fromnickname_;
  ::google::protobuf::RepeatedPtrField< ::com::huizhi::im::protobuf::UnReadMessage > messages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_UnReadMessageInfoBuf_2eproto();
  friend void protobuf_AssignDesc_UnReadMessageInfoBuf_2eproto();
  friend void protobuf_ShutdownFile_UnReadMessageInfoBuf_2eproto();

  void InitAsDefaultInstance();
  static UnReadMessageInfo* default_instance_;
};
// -------------------------------------------------------------------

class UnReadMessage : public ::google::protobuf::Message {
 public:
  UnReadMessage();
  virtual ~UnReadMessage();

  UnReadMessage(const UnReadMessage& from);

  inline UnReadMessage& operator=(const UnReadMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnReadMessage& default_instance();

  void Swap(UnReadMessage* other);

  // implements Message ----------------------------------------------

  UnReadMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnReadMessage& from);
  void MergeFrom(const UnReadMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required int64 created = 3;
  inline bool has_created() const;
  inline void clear_created();
  static const int kCreatedFieldNumber = 3;
  inline ::google::protobuf::int64 created() const;
  inline void set_created(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.huizhi.im.protobuf.UnReadMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_created();
  inline void clear_has_created();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int64 created_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_UnReadMessageInfoBuf_2eproto();
  friend void protobuf_AssignDesc_UnReadMessageInfoBuf_2eproto();
  friend void protobuf_ShutdownFile_UnReadMessageInfoBuf_2eproto();

  void InitAsDefaultInstance();
  static UnReadMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// UnReadMessageInfo

// required int32 fromUserId = 1;
inline bool UnReadMessageInfo::has_fromuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnReadMessageInfo::set_has_fromuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnReadMessageInfo::clear_has_fromuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnReadMessageInfo::clear_fromuserid() {
  fromuserid_ = 0;
  clear_has_fromuserid();
}
inline ::google::protobuf::int32 UnReadMessageInfo::fromuserid() const {
  return fromuserid_;
}
inline void UnReadMessageInfo::set_fromuserid(::google::protobuf::int32 value) {
  set_has_fromuserid();
  fromuserid_ = value;
}

// optional string fromUserPhoto = 2;
inline bool UnReadMessageInfo::has_fromuserphoto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnReadMessageInfo::set_has_fromuserphoto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnReadMessageInfo::clear_has_fromuserphoto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnReadMessageInfo::clear_fromuserphoto() {
  if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_->clear();
  }
  clear_has_fromuserphoto();
}
inline const ::std::string& UnReadMessageInfo::fromuserphoto() const {
  return *fromuserphoto_;
}
inline void UnReadMessageInfo::set_fromuserphoto(const ::std::string& value) {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  fromuserphoto_->assign(value);
}
inline void UnReadMessageInfo::set_fromuserphoto(const char* value) {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  fromuserphoto_->assign(value);
}
inline void UnReadMessageInfo::set_fromuserphoto(const char* value, size_t size) {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  fromuserphoto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnReadMessageInfo::mutable_fromuserphoto() {
  set_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    fromuserphoto_ = new ::std::string;
  }
  return fromuserphoto_;
}
inline ::std::string* UnReadMessageInfo::release_fromuserphoto() {
  clear_has_fromuserphoto();
  if (fromuserphoto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromuserphoto_;
    fromuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnReadMessageInfo::set_allocated_fromuserphoto(::std::string* fromuserphoto) {
  if (fromuserphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete fromuserphoto_;
  }
  if (fromuserphoto) {
    set_has_fromuserphoto();
    fromuserphoto_ = fromuserphoto;
  } else {
    clear_has_fromuserphoto();
    fromuserphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fromNickName = 3;
inline bool UnReadMessageInfo::has_fromnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnReadMessageInfo::set_has_fromnickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnReadMessageInfo::clear_has_fromnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnReadMessageInfo::clear_fromnickname() {
  if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
    fromnickname_->clear();
  }
  clear_has_fromnickname();
}
inline const ::std::string& UnReadMessageInfo::fromnickname() const {
  return *fromnickname_;
}
inline void UnReadMessageInfo::set_fromnickname(const ::std::string& value) {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  fromnickname_->assign(value);
}
inline void UnReadMessageInfo::set_fromnickname(const char* value) {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  fromnickname_->assign(value);
}
inline void UnReadMessageInfo::set_fromnickname(const char* value, size_t size) {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  fromnickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnReadMessageInfo::mutable_fromnickname() {
  set_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    fromnickname_ = new ::std::string;
  }
  return fromnickname_;
}
inline ::std::string* UnReadMessageInfo::release_fromnickname() {
  clear_has_fromnickname();
  if (fromnickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromnickname_;
    fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnReadMessageInfo::set_allocated_fromnickname(::std::string* fromnickname) {
  if (fromnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete fromnickname_;
  }
  if (fromnickname) {
    set_has_fromnickname();
    fromnickname_ = fromnickname;
  } else {
    clear_has_fromnickname();
    fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 toUserId = 4;
inline bool UnReadMessageInfo::has_touserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnReadMessageInfo::set_has_touserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnReadMessageInfo::clear_has_touserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnReadMessageInfo::clear_touserid() {
  touserid_ = 0;
  clear_has_touserid();
}
inline ::google::protobuf::int32 UnReadMessageInfo::touserid() const {
  return touserid_;
}
inline void UnReadMessageInfo::set_touserid(::google::protobuf::int32 value) {
  set_has_touserid();
  touserid_ = value;
}

// repeated .com.huizhi.im.protobuf.UnReadMessage messages = 5;
inline int UnReadMessageInfo::messages_size() const {
  return messages_.size();
}
inline void UnReadMessageInfo::clear_messages() {
  messages_.Clear();
}
inline const ::com::huizhi::im::protobuf::UnReadMessage& UnReadMessageInfo::messages(int index) const {
  return messages_.Get(index);
}
inline ::com::huizhi::im::protobuf::UnReadMessage* UnReadMessageInfo::mutable_messages(int index) {
  return messages_.Mutable(index);
}
inline ::com::huizhi::im::protobuf::UnReadMessage* UnReadMessageInfo::add_messages() {
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::huizhi::im::protobuf::UnReadMessage >&
UnReadMessageInfo::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::huizhi::im::protobuf::UnReadMessage >*
UnReadMessageInfo::mutable_messages() {
  return &messages_;
}

// -------------------------------------------------------------------

// UnReadMessage

// required int32 type = 1;
inline bool UnReadMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnReadMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnReadMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnReadMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UnReadMessage::type() const {
  return type_;
}
inline void UnReadMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required bytes content = 2;
inline bool UnReadMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnReadMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnReadMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnReadMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& UnReadMessage::content() const {
  return *content_;
}
inline void UnReadMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void UnReadMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void UnReadMessage::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnReadMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* UnReadMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnReadMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 created = 3;
inline bool UnReadMessage::has_created() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnReadMessage::set_has_created() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnReadMessage::clear_has_created() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnReadMessage::clear_created() {
  created_ = GOOGLE_LONGLONG(0);
  clear_has_created();
}
inline ::google::protobuf::int64 UnReadMessage::created() const {
  return created_;
}
inline void UnReadMessage::set_created(::google::protobuf::int64 value) {
  set_has_created();
  created_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnReadMessageInfoBuf_2eproto__INCLUDED
