// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NoticeBuf.proto

#ifndef PROTOBUF_NoticeBuf_2eproto__INCLUDED
#define PROTOBUF_NoticeBuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace huizhi {
namespace im {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NoticeBuf_2eproto();
void protobuf_AssignDesc_NoticeBuf_2eproto();
void protobuf_ShutdownFile_NoticeBuf_2eproto();

class Notice;
class NoticeResponse;

// ===================================================================

class Notice : public ::google::protobuf::Message {
 public:
  Notice();
  virtual ~Notice();

  Notice(const Notice& from);

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notice& default_instance();

  void Swap(Notice* other);

  // implements Message ----------------------------------------------

  Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int64 noticeId = 3;
  inline bool has_noticeid() const;
  inline void clear_noticeid();
  static const int kNoticeIdFieldNumber = 3;
  inline ::google::protobuf::int64 noticeid() const;
  inline void set_noticeid(::google::protobuf::int64 value);

  // required string nickName = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string photo = 5;
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 5;
  inline const ::std::string& photo() const;
  inline void set_photo(const ::std::string& value);
  inline void set_photo(const char* value);
  inline void set_photo(const char* value, size_t size);
  inline ::std::string* mutable_photo();
  inline ::std::string* release_photo();
  inline void set_allocated_photo(::std::string* photo);

  // required string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.huizhi.im.protobuf.Notice)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_noticeid();
  inline void clear_has_noticeid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_photo();
  inline void clear_has_photo();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int64 noticeid_;
  ::std::string* nickname_;
  ::std::string* photo_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_NoticeBuf_2eproto();
  friend void protobuf_AssignDesc_NoticeBuf_2eproto();
  friend void protobuf_ShutdownFile_NoticeBuf_2eproto();

  void InitAsDefaultInstance();
  static Notice* default_instance_;
};
// -------------------------------------------------------------------

class NoticeResponse : public ::google::protobuf::Message {
 public:
  NoticeResponse();
  virtual ~NoticeResponse();

  NoticeResponse(const NoticeResponse& from);

  inline NoticeResponse& operator=(const NoticeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeResponse& default_instance();

  void Swap(NoticeResponse* other);

  // implements Message ----------------------------------------------

  NoticeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeResponse& from);
  void MergeFrom(const NoticeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int64 noticeId = 2;
  inline bool has_noticeid() const;
  inline void clear_noticeid();
  static const int kNoticeIdFieldNumber = 2;
  inline ::google::protobuf::int64 noticeid() const;
  inline void set_noticeid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.huizhi.im.protobuf.NoticeResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_noticeid();
  inline void clear_has_noticeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 noticeid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NoticeBuf_2eproto();
  friend void protobuf_AssignDesc_NoticeBuf_2eproto();
  friend void protobuf_ShutdownFile_NoticeBuf_2eproto();

  void InitAsDefaultInstance();
  static NoticeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Notice

// required int32 type = 1;
inline bool Notice::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notice::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notice::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notice::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Notice::type() const {
  return type_;
}
inline void Notice::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 userId = 2;
inline bool Notice::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notice::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notice::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notice::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Notice::userid() const {
  return userid_;
}
inline void Notice::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int64 noticeId = 3;
inline bool Notice::has_noticeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notice::set_has_noticeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notice::clear_has_noticeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notice::clear_noticeid() {
  noticeid_ = GOOGLE_LONGLONG(0);
  clear_has_noticeid();
}
inline ::google::protobuf::int64 Notice::noticeid() const {
  return noticeid_;
}
inline void Notice::set_noticeid(::google::protobuf::int64 value) {
  set_has_noticeid();
  noticeid_ = value;
}

// required string nickName = 4;
inline bool Notice::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Notice::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Notice::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Notice::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Notice::nickname() const {
  return *nickname_;
}
inline void Notice::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Notice::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Notice::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Notice::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string photo = 5;
inline bool Notice::has_photo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Notice::set_has_photo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Notice::clear_has_photo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Notice::clear_photo() {
  if (photo_ != &::google::protobuf::internal::kEmptyString) {
    photo_->clear();
  }
  clear_has_photo();
}
inline const ::std::string& Notice::photo() const {
  return *photo_;
}
inline void Notice::set_photo(const ::std::string& value) {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::kEmptyString) {
    photo_ = new ::std::string;
  }
  photo_->assign(value);
}
inline void Notice::set_photo(const char* value) {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::kEmptyString) {
    photo_ = new ::std::string;
  }
  photo_->assign(value);
}
inline void Notice::set_photo(const char* value, size_t size) {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::kEmptyString) {
    photo_ = new ::std::string;
  }
  photo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_photo() {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::kEmptyString) {
    photo_ = new ::std::string;
  }
  return photo_;
}
inline ::std::string* Notice::release_photo() {
  clear_has_photo();
  if (photo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = photo_;
    photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_photo(::std::string* photo) {
  if (photo_ != &::google::protobuf::internal::kEmptyString) {
    delete photo_;
  }
  if (photo) {
    set_has_photo();
    photo_ = photo;
  } else {
    clear_has_photo();
    photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string content = 6;
inline bool Notice::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Notice::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Notice::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Notice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Notice::content() const {
  return *content_;
}
inline void Notice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Notice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Notice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Notice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NoticeResponse

// required int32 result = 1;
inline bool NoticeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 NoticeResponse::result() const {
  return result_;
}
inline void NoticeResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int64 noticeId = 2;
inline bool NoticeResponse::has_noticeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeResponse::set_has_noticeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticeResponse::clear_has_noticeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticeResponse::clear_noticeid() {
  noticeid_ = GOOGLE_LONGLONG(0);
  clear_has_noticeid();
}
inline ::google::protobuf::int64 NoticeResponse::noticeid() const {
  return noticeid_;
}
inline void NoticeResponse::set_noticeid(::google::protobuf::int64 value) {
  set_has_noticeid();
  noticeid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace huizhi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NoticeBuf_2eproto__INCLUDED
